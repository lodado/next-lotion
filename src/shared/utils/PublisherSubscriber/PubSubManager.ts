import { put } from "redux-saga/effects";

interface CallbackFunction {
  (payload: any): void;
}

type KEY = string;
type TYPE = any;

let autogeneratedKey = 0;
const generateKey = () => {
  autogeneratedKey += 1;
  return String(autogeneratedKey);
};

/**
 * Manages the publish-subscribe pattern for a set of actions.
 */
class PubSubManager {
  private subscriptions: {
    [key: string]: {
      key: KEY;
      callback: CallbackFunction;
    }[];
  } = {};

  /**
   * Unsubscribes a callback function from a specific action type.
   * @param actionType - The type of action to unsubscribe from.
   * @param callback - The callback function to unsubscribe.
   */
  unSubscribe = (actionType: string, { key }: { key: string }) => {
    const subscribers = this.subscriptions[actionType];

    if (subscribers) {
      this.subscriptions[actionType] = subscribers.filter((subscriber) => subscriber.key === key);
    }
  };

  /**
   * Subscribes a callback function to a specific action type.
   * @param actionType - The type of action to subscribe to.
   * @param callback - The callback function to be called when the action is published.
   * @returns A function to unsubscribe the callback from the action type.
   */
  subscribe = (keyAction: { type: TYPE }, { key, type }: { key?: KEY; type: TYPE }) => {
    const { type: actionType } = keyAction;

    if (!this.subscriptions[actionType]) {
      this.subscriptions[actionType] = [];
    }

    this.subscriptions[actionType].push({
      key: key ?? generateKey(),
      callback: function* (payload) {
        yield put({ type, payload });
      },
    });

    return this.unSubscribe;
  };

  /**
   * Publishes an action to all subscribers of the corresponding action type.
   * @param action - The action to publish.
   * @returns An iterator that yields the results of all subscriber callbacks.
   */
  publish(action: { type: TYPE }) {
    const subscribers = this.subscriptions[action.type];
    return subscribers?.map((subscriber) => subscriber.callback);
  }
}

const pubsubManager = new PubSubManager();

export default pubsubManager;
